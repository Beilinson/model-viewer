[
  {
    "Title": "EffectComposer",
    "htmlName": "effectcomposer",
    "Attributes": [
      {
        "name": "renderMode",
        "htmlName": "renderMode",
        "description": "This property sets the EffectComposer frame-buffer type to either UnsignedByteType if set to 'performance', or HalfFloatType if set to 'quality'. By setting this to 'quality', the effects under this EffectComposer will have access to high-precision buffers that are not limited to regular sRGB buffers, which have values clamped to [0.0, 1.0]. This can lead to noticeable improvements in color accuracy when used with the &lt;color-grade-effect&gt;, and reduce banding in dark scenes, especially with the &lt;bloom-effect&gt;.",
        "links": [
          "<a href=\"../examples/postprocessing#setup\">Related examples</a>"
        ],
        "default": {
          "default": "performance",
          "options": "performance, quality"
        }
      },
      {
        "name": "msaa",
        "htmlName": "msaa",
        "description": "Multi-Sampling Anti Aliasing.",
        "links": [
          "<a href=\"../examples/postprocessing#setup\">Related examples</a>"
        ],
        "default": {
          "default": "0",
          "options": "Any factor of 2"
        }
      }
    ],
    "Properties": [
      {
        "name": "modelViewerElement",
        "htmlName": "modelViewerElement",
        "description": "This property is read-only. It return a reference to the parent &lt;model-viewer&gt; element."
      },
      {
        "name": "selection",
        "htmlName": "selection",
        "description": "This property is read-only. It return a reference to the parent &lt;model-viewer&gt; element."
      },
      {
        "name": "normalBuffer",
        "htmlName": "normalBuffer",
        "description": "This property is read-only. It return a reference to the parent &lt;model-viewer&gt; element."
      },
      {
        "name": "userPasses",
        "htmlName": "userPasses",
        "description": "This property is read-only. It return a reference to the parent &lt;model-viewer&gt; element."
      }
    ],
    "Methods": [
      {
        "name": "addPass(pass: Pass , requireNormals?: boolean, requireDirtyRender?: boolean)",
        "htmlName": "addPass",
        "description": "Dismisses the <span class='attribute'>poster</span>, causing the model to load and render if necessary. This is currently effectively the same as interacting with the <span class='attribute'>poster</span> via user input."
      },
      {
        "name": "removePass(pass: Pass, dispose: boolean = true)",
        "htmlName": "removePass",
        "description": "Dismisses the <span class='attribute'>poster</span>, causing the model to load and render if necessary. This is currently effectively the same as interacting with the <span class='attribute'>poster</span> via user input."
      },
      {
        "name": "queueRender()",
        "htmlName": "queueRender",
        "description": "Dismisses the <span class='attribute'>poster</span>, causing the model to load and render if necessary. This is currently effectively the same as interacting with the <span class='attribute'>poster</span> via user input."
      }
    ],
    "Events": [
      {
        "name": "update-selection",
        "htmlName": "update-selection",
        "description": "This event can be triggered for two reasons: a model has failed to load or parse, or the WebGL context was lost. If the model failed to load, event.detail.type will be 'loadfailure'. If the WebGL context was lost, event.detail.type will be 'webglcontextlost'. In both cases, recovery countermeasures are left as an exercise for the user. The element will not make automatic attempts to re-load a model that has failed to load. Nor will the element attempt to restore the GL context after it has been lost. Error events also hold a reference to the originating error event (when there is one) as event.detail.sourceEvent."
      }
    ]
  }
]
